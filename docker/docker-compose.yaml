# note: we do not run prod service with docker-compose, we use it just for
# configuring the production build
services:
  prod:
    # image name, both locally and public
    image: reports
    build:
      context: ..
      # path relative to context
      dockerfile: docker/Dockerfile
      # the prod stage in the Dockerfile
      target: reports-prod
      # should speed up the build in CI, where we have a cold cache
      cache_from:  # should speed up the build in CI, where we have a cold cache
        - ghcr.io/opensafely-core/base-docker
        - ghcr.io/opensafely-core/reports
      args:
        # this makes the image work for later cache_from: usage
        - BUILDKIT_INLINE_CACHE=1
        # env vars supplied by just
        - BUILD_DATE
        - GITREF
    # use dockers builitin PID daemon
    init: true
    ports:
      - "8000:8000"

  node-assets:
    extends:
      service: prod
    image: reports-node-assets
    build:
      # the node-builder stage in the Dockerfile
      target: node-builder
    volumes:
      - ..:/app

  # main development service
  dev:
    extends:
      service: prod
    image: reports-dev
    container_name: reports-dev
    build:
      # the dev stage in the Dockerfile
      target: reports-dev
      args:
        # user developer uid:gid in dev
        - USERID=${DEV_USERID:-1000}
        - GROUPID=${DEV_GROUPID:-1000}
    # paths relative to docker-compose.yaml file
    env_file:
      - ../.env
    volumes:
      - ..:/app
    # override command
    command: python manage.py runserver 0.0.0.0:8000

  # test runner service - uses dev-image with a different entrypoint commnd
  test:
    extends:
      service: dev
    container_name: reports-test
    # different default test env
    env_file:
      - ../.test.env
    # override entrypoint and command
    entrypoint: /app/docker/entrypoints/test.sh
    command: bash -c "coverage run --branch --source=gateway,reports,services,tests --module pytest && coverage report || coverage html"
